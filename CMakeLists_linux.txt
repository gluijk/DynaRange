# =============================================================================
# 1. CONFIGURACIÓN INICIAL DEL PROYECTO
# =============================================================================
cmake_minimum_required(VERSION 3.16)
project(dynaRange CXX)

# --- Opciones y variables globales del compilador ---
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
# Definiciones globales para compatibilidad (ej: M_PI en Windows)
add_definitions(-DNOMINMAX -D_USE_MATH_DEFINES)

# --- Rutas y directorios ---
# Añade la carpeta /cmake local para módulos personalizados de CMake
list(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake")
# Directorio de salida para los ejecutables y recursos
set(PORTABLE_DIR ${CMAKE_BINARY_DIR})


# =============================================================================
# 2. BÚSQUEDA DE DEPENDENCIAS
# =============================================================================
find_package(PkgConfig REQUIRED)

# --- Librerías principales ---
pkg_check_modules(LIBRAW REQUIRED libraw)
find_package(OpenCV 4 REQUIRED)
find_package(Eigen3 3.3 REQUIRED)
find_package(CLI11 REQUIRED)
find_package(Gettext REQUIRED)
find_package(wxWidgets COMPONENTS core base html xrc qa net REQUIRED)
pkg_check_modules(CAIRO REQUIRED cairo)


# =============================================================================
# 3. AGRUPACIÓN DE FICHEROS FUENTE
# =============================================================================
# Fuentes compartidas entre la versión CLI y la GUI
set(CORE_SOURCES
    src/core/Analysis.cpp
    src/core/Arguments.cpp
    src/core/Engine.cpp
    src/core/engine/Initialization.cpp
    src/core/engine/Processing.cpp
    src/core/engine/Reporting.cpp
    src/core/graphics/Drawing.cpp
    src/core/graphics/Plotting.cpp
    src/core/Math.cpp
    src/core/RawFile.cpp
    src/core/ImageProcessing.cpp
)


# =============================================================================
# 4. DEFINICIÓN DE LOS EJECUTABLES (TARGETS)
# =============================================================================

# --- Target 1: Ejecutable de línea de comandos (CLI) ---
add_executable(rango
    src/rango.cpp
    ${CORE_SOURCES}
    icono_owl.rc # Fichero de recursos para el icono en Windows
)

target_include_directories(rango PRIVATE 
    ${OpenCV_INCLUDE_DIRS} 
    ${LIBRAW_INCLUDE_DIRS}
    ${EIGEN3_INCLUDE_DIR}
    ${CAIRO_INCLUDE_DIRS}
)

target_link_libraries(rango PRIVATE 
    ${OpenCV_LIBS} 
    ${LIBRAW_LIBRARIES}
    CLI11::CLI11
    ${GETTEXT_LIBRARIES}
    ${CAIRO_LIBRARIES}
)

# --- Target 2: Ejecutable con interfaz gráfica (GUI) ---
# WIN32 oculta la consola de comandos al ejecutar en Windows
add_executable(dynaRangeGui WIN32
    src/DynaRangeGuiApp.cpp
    src/gui/DynaRangeBase.cpp
    src/gui/DynaRangeFrame.cpp
    ${CORE_SOURCES}
    icono_noise.rc # Fichero de recursos para el icono en Windows
)

target_include_directories(dynaRangeGui PRIVATE 
    ${OpenCV_INCLUDE_DIRS}
    ${LIBRAW_INCLUDE_DIRS}
    ${EIGEN3_INCLUDE_DIR}
    ${wxWidgets_INCLUDE_DIRS}
    ${CAIRO_INCLUDE_DIRS}
)

target_compile_definitions(dynaRangeGui PRIVATE 
    ${wxWidgets_DEFINITIONS}
)

target_link_libraries(dynaRangeGui PRIVATE
    ${wxWidgets_LIBRARIES}
    ${OpenCV_LIBS}
    ${LIBRAW_LIBRARIES}
    CLI11::CLI11
    ${GETTEXT_LIBRARIES}
    ${CAIRO_LIBRARIES}
)


# =============================================================================
# 5. CONFIGURACIÓN POST-COMPILACIÓN
# =============================================================================
# Establece que los ejecutables se generen en el directorio definido en PORTABLE_DIR
set_target_properties(rango dynaRangeGui PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY "${PORTABLE_DIR}"
)

# Copia los recursos necesarios al directorio de salida
file(COPY "${CMAKE_SOURCE_DIR}/logo.png" DESTINATION "${PORTABLE_DIR}")


# =============================================================================
# 6. INTERNACIONALIZACIÓN (Traducciones con Gettext)
# =============================================================================
include(UseGettext)
set(GETTEXT_XGETTEXT_FLAGS "--from-code=UTF-8")
set(LANGUAGES "es" "de" "it" "fr" "pt" "ca")

set(I18N_SOURCES
    src/rango.cpp
    src/DynaRangeGuiApp.cpp
    src/gui/DynaRangeFrame.cpp
    ${CORE_SOURCES}
)

GETTEXT_CREATE_POT_FILE(${PROJECT_NAME} ${I18N_SOURCES})
GETTEXT_ADD_PO_FILES(${PROJECT_NAME} ALL ${LANGUAGES})
GETTEXT_PROCESS_PO_FILES(${PROJECT_NAME} ALL INSTALL_DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/locale ${LANGUAGES})


# =============================================================================
# 7. INSTALACIÓN Y EMPAQUETADO (CPack)
# =============================================================================
include(InstallRequiredSystemLibraries)
set(CPACK_PROJECT_NAME ${PROJECT_NAME})
set(CPACK_PROJECT_VERSION ${PROJECT_VERSION})

install(TARGETS rango dynaRangeGui DESTINATION bin)

include(CPack)